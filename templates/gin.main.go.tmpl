package main

import (
	"bufio"
	"fmt"
	"log"
	"net"
	"net/http/httputil"
	"net/url"
	"os"
	"path/filepath"
	"strings"

	a "{{.Title}}/app"
	"github.com/gin-gonic/gin"
)

// proxyToVite proxies non-API requests to the Vite dev server.
func proxyToVite(target string) gin.HandlerFunc {
	url, err := url.Parse(target)
	if err != nil {
		log.Fatalf("Invalid Vite dev server URL: %v", err)
	}
	proxy := httputil.NewSingleHostReverseProxy(url)
	return func(c *gin.Context) {
		// Only proxy non-API requests
		if strings.HasPrefix(c.Request.URL.Path, "/api/") {
			c.Next()
			return
		}
		proxy.ServeHTTP(c.Writer, c.Request)
		c.Abort()
	}
}

func findAvailablePort(startPort int) (int, error) {
	for port := startPort; port < 65535; port++ {
		ln, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
		if err == nil {
			ln.Close()
			return port, nil
		}
	}
	return 0, fmt.Errorf("could not find an available port")
}

// updateOrCreateEnv updates or adds VITE_API_URL in the frontend .env file.
func updateOrCreateEnv(port int) error {
	envPath := filepath.Join("..", ".env") // Adjust path as needed
	newLine := fmt.Sprintf("VITE_API_URL=http://localhost:%d/api", port)
	var lines []string
	found := false

	file, err := os.Open(envPath)
	if err == nil {
		defer file.Close()
		scanner := bufio.NewScanner(file)
		for scanner.Scan() {
			line := scanner.Text()
			if strings.HasPrefix(line, "VITE_API_URL=") {
				lines = append(lines, newLine)
				found = true
			} else {
				lines = append(lines, line)
			}
		}
		if err := scanner.Err(); err != nil {
			return fmt.Errorf("error reading .env: %w", err)
		}
	} else if os.IsNotExist(err) {
		lines = append(lines, newLine)
		found = true
	} else {
		return fmt.Errorf("error opening .env: %w", err)
	}

	if !found {
		lines = append(lines, newLine)
	}

	err = os.WriteFile(envPath, []byte(strings.Join(lines, "\n")+"\n"), 0644)
	if err != nil {
		return fmt.Errorf("error writing .env: %w", err)
	}
	return nil
}

func main() {
	port, err := findAvailablePort(8080)
	if err != nil {
		log.Fatalf("Error finding available port: %v", err)
	}

	if err := updateOrCreateEnv(port); err != nil {
		log.Fatalf("Failed to update frontend .env: %v", err)
	}

	// Create main router
	mainRouter := gin.Default()

	// Get the app engine
	appEngine := a.App()

	// Mount the app engine under /api
	mainRouter.Any("/api/*path", func(c *gin.Context) {
		// Strip the /api prefix
		originalPath := c.Request.URL.Path
		c.Request.URL.Path = strings.TrimPrefix(originalPath, "/api")

		// Handle the request
		appEngine.HandleContext(c)

		// Restore the original path (good practice)
		c.Request.URL.Path = originalPath
	})
	// Proxy all other requests to Vite dev server
	mainRouter.NoRoute(proxyToVite("http://localhost:5173"))

	log.Printf("Dev server running at http://localhost:%d", port)
	if err := mainRouter.Run(fmt.Sprintf(":%d", port)); err != nil {
		log.Fatal(err)
	}
}
